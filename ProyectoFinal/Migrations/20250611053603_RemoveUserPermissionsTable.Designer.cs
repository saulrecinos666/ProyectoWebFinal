// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoFinal.Models.Base;

#nullable disable

namespace ProyectoFinal.Migrations
{
    [DbContext(typeof(DbCitasMedicasContext))]
    [Migration("20250611053603_RemoveUserPermissionsTable")]
    partial class RemoveUserPermissionsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProyectoFinal.Models.Appointments.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Scheduled");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCC2C434A351");

                    b.HasIndex("PatientId");

                    b.HasIndex(new[] { "AppointmentDate" }, "IDX_Appointments_AppointmentDate");

                    b.HasIndex(new[] { "AppointmentId" }, "IDX_Appointments_AppointmentId");

                    b.HasIndex(new[] { "DoctorId" }, "IDX_Appointments_DoctorId");

                    b.HasIndex(new[] { "InstitutionId" }, "IDX_Appointments_InstitutionId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Departments.Department", b =>
                {
                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentCode")
                        .HasName("PK__Departme__6EA8896CECBB558C");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Districts.District", b =>
                {
                    b.Property<string>("DistrictCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MunicipalityCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("DistrictCode")
                        .HasName("PK__District__3D4E86AA957D26B2");

                    b.HasIndex("MunicipalityCode");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Doctors.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Dui")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("DUI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctors__2DC00EBF76B447A7");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Dui" }, "IDX_Doctors_DUI");

                    b.HasIndex(new[] { "DoctorId" }, "IDX_Doctors_DoctorId");

                    b.HasIndex(new[] { "InstitutionId" }, "IDX_Doctors_InstitutionId");

                    b.HasIndex(new[] { "SpecialtyId" }, "IDX_Doctors_SpecialtyId");

                    b.HasIndex(new[] { "Email" }, "UQ__Doctors__A9D10534ECE39BC7")
                        .IsUnique();

                    b.HasIndex(new[] { "Dui" }, "UQ__Doctors__C03671B9CE3A8576")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Institutions.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("DistrictCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("InstitutionId")
                        .HasName("PK__Institut__8DF6B6AD35E2768A");

                    b.HasIndex(new[] { "DistrictCode" }, "IDX_Institutions_DistrictCode");

                    b.HasIndex(new[] { "InstitutionId" }, "IDX_Institutions_InstitutionId");

                    b.HasIndex(new[] { "Name" }, "IDX_Institutions_Name");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Municipalities.Municipality", b =>
                {
                    b.Property<string>("MunicipalityCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MunicipalityCode")
                        .HasName("PK__Municipa__582D8400C9624328");

                    b.HasIndex("DepartmentCode");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Patients.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Dui")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("DUI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC366DA5BA251");

                    b.HasIndex(new[] { "UserId" }, "IDX_Patient_UserId");

                    b.HasIndex(new[] { "Dui" }, "IDX_Patients_DUI");

                    b.HasIndex(new[] { "PatientId" }, "IDX_Patients_PatientId");

                    b.HasIndex(new[] { "Dui" }, "UQ__Patients__C03671B96FD1186B")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Permissions.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__EFA6FB2FA762D8F1");

                    b.HasIndex(new[] { "PermissionId" }, "IDX_Permissions_PermissionId");

                    b.HasIndex(new[] { "PermissionName" }, "UQ__Permissi__0FFDA357060CF395")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GrantedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GrantedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Specialties.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecialtyId")
                        .HasName("PK__Specialt__D768F6A881DCA376");

                    b.HasIndex(new[] { "SpecialtyId" }, "IDX_Specialties_SpecialtyId");

                    b.HasIndex(new[] { "Name" }, "IDX_Specialties_SpecialtyName");

                    b.HasIndex(new[] { "Name" }, "UQ__Specialt__7DCA5748215E07C4")
                        .IsUnique();

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CE147ED69");

                    b.HasIndex(new[] { "UserId" }, "IDX_Users_UserId");

                    b.HasIndex(new[] { "Username" }, "IDX_Users_Username");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E48305B4B7")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534C83A046E")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Users.UserLoginHistory", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginId")
                        .HasName("PK__UserLogi__4DDA28189AD2E5C5");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory", (string)null);
                });

            modelBuilder.Entity("ProyectoFinal.Models.Appointments.Appointment", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Doctors.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Doctors");

                    b.HasOne("ProyectoFinal.Models.Institutions.Institution", "Institution")
                        .WithMany("Appointments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Institutions");

                    b.HasOne("ProyectoFinal.Models.Patients.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Patients");

                    b.Navigation("Doctor");

                    b.Navigation("Institution");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Districts.District", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Municipalities.Municipality", "MunicipalityCodeNavigation")
                        .WithMany("Districts")
                        .HasForeignKey("MunicipalityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Districts__Munic__3C69FB99");

                    b.Navigation("MunicipalityCodeNavigation");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Doctors.Doctor", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Institutions.Institution", "Institution")
                        .WithMany("Doctors")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Doctors__Institu__6383C8BA");

                    b.HasOne("ProyectoFinal.Models.Specialties.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Doctors__Special__628FA481");

                    b.HasOne("ProyectoFinal.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Institutions.Institution", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Districts.District", "District")
                        .WithMany("Institutions")
                        .HasForeignKey("DistrictCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Instituti__Distr__5BE2A6F2");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Municipalities.Municipality", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Departments.Department", "DepartmentCodeNavigation")
                        .WithMany("Municipalities")
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Municipal__Depar__398D8EEE");

                    b.Navigation("DepartmentCodeNavigation");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Patients.Patient", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Users.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__Patients__User__666");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.RolePermission", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Permissions");

                    b.HasOne("ProyectoFinal.Models.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Roles");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.UserRole", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("ProyectoFinal.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Users.UserLoginHistory", b =>
                {
                    b.HasOne("ProyectoFinal.Models.Users.User", "User")
                        .WithMany("UserLoginHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLoginHistory_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Departments.Department", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Districts.District", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Doctors.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Institutions.Institution", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Municipalities.Municipality", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Patients.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Specialties.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ProyectoFinal.Models.Users.User", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("UserLoginHistories");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
